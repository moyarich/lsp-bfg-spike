[lsp]
# task_list: list of workloads to be executed, separated by comma
# exec_mode: sequential/concurrency
task_list = copy, dsq, foj, fts, gpfdist, madlib, madlib_nc, partition, retail_dw, sri-ao-co, sri-ao-part, tins, tpcds, tpch-ao-co, tpch-ao-part, tpch_parquet_partition-insert,  tpch_parquet_partition-exchange
exec_mode = sequential


[copy]
dbname = gpsqltest
niteration = 1
load_data = True
table_setting = True, ROW, 1048576, 8388608, QuickLZ, 1, False
run_workloads = True, 1, RANDOM


[dsq]
dbname = gpsqltest
niteration = 1
load_data = True
size = 3
run_workloads = True, 1, RANDOM


[foj]
dbname = gpsqltest
niteration = 1
load_data = True, 1
table_setting = True, ROW, 1048576, 8388608, QuickLZ, 1, False
run_workloads = True, 1, RANDOM


[fts]
dbname = gpsqltest
niteration = 1
load_data = True, 1
table_setting = True, ROW, 1048576, 8388608, QuickLZ, 1, False
run_workloads = True, 1, RANDOM


[gpfdist]
dbname = gpsqltest
niteration = 1
load_data = True, 10
table_setting = True, ROW, 1048576, 8388608, QuickLZ, 1, False
run_workloads = True, 1, RANDOM


[madlib]
dbname = gpsqltest
niteration = 1
load_data = True
run_workloads = True, 1, RANDOM


[madlib_nc]
dbname = gpsqltest
niteration = 1
load_data = True
run_workloads = True, 1, RANDOM


[partition]
dbname = gpsqltest
niteration = 1
load_data = True
npartitions = 5
ninserts = 10
table_setting = True, ROW, 1048576, 8388608, QuickLZ, 1
run_workloads = True, 1, RANDOM


[retail_dw]
dbname = gpsqltest
niteration = 1
load_data = True
run_workloads = True, 1, RANDOM


[sri-ao-co]
# ntables: number: number of tables to be created
#          method: create table methond,concurrency/sequential
# ninserts: number: number of inserts
#           distribute method: the inserts distribute flag: even/skew
#run_workloads: flag: True to run SRI, False only create tables
#               nconcurrency: concurrency of SRI workloads execution
#               query_order: order of SRI queries, SEQUENTIAL/RANDOM
dbname = gpsqltest
niteration = 1
load_data = True
ntables = 2, concurrency
ninserts = 10, even
table_setting = True, COLUMN, 1048576, 8388608, QuickLZ, 1, False
run_workloads = True, 1, RANDOM


[sri-ao-part]
# same as sri but with different setting,
# use sri-1, sri-2  etc. NOTE: must use '-' to name task
dbname = gpsqltest
niteration = 1
load_data = True
ntables = 1, sequential
ninserts = 10, even
table_setting = True, ROW, 1048576, 8388608, QuickLZ, 1, True
run_workloads = True, 1, RANDOM


[tins]
dbname = gpsqltest
niteration = 1
load_data = True
run_workloads = True, 1, SEQUENTIAL


[tpcds]
dbname = gpsqltest
niteration = 1
# load_data: flag of data generation: True to generate TPC-DS data, False to skip data generation
#            scale
#            flag of data loading: True to load TPC-DS data, False to skip data loading
load_data = True,1,True
table_setting = True, ROW, 1048576, 8388608, QuickLZ, 1, False
run_workloads = True,2,RANDOM
call_center = 31
catalog_page = 9
catalog_returns = 27
catalog_sales = 34
customer = 18
customer_address = 13
customer_demographics = 9
date_dim = 28
dbgen_version = 4
household_demographics = 5
income_band = 3
inventory = 4
item = 22
promotion = 19
reason = 3
ship_mode = 6
store = 29
store_returns = 20
store_sales = 23
time_dim = 10
warehouse = 14
web_page = 14
web_returns = 24
web_sales = 34
web_site = 26


[tpch-ao-co]
# dbname: name of database to run TPC-H
# niteration: number of iterations to run TPC-H
# load_data: flag: True to load TPC-H data, False to skip data loading
#            data_size: GB/host
# table_setting: flag: True for AO, False for Heap
#                orientation: row/column/parquet
#                pagesize: only for parquet, default value is 1048576B (1MB)
#                rowgroupsize: only for parquet, default value is 8388608B (8MB)
#                compression type: zlib/quicklz for AO tables, snappy/gzip for parquet
#                compression level: only 1 for quicklz, 1~9 for zlib
#                partition: True to with 128 partitions, False to without partitions
# run_workloads: flag: True to run TPC-H, False to skip TPC-H query execution
#                nconcurrency: concurrency of TPC-H workloads execution
#                query_order: order of TPC-H queries, SEQUENTIAL/RANDOM
dbname = gpsqltest
niteration = 1
load_data = True, 1
table_setting = True, COLUMN, 1048576, 8388608, QuickLZ, 1, False
run_workloads = True, 1, RANDOM


[tpch-ao-part]
# same as tpch but with different setting,
# use tpch-1, tpch-2 ,tpch-3 etc. NOTE: must use '-' to name task
dbname = gpsqltest
niteration = 1
load_data = True, 1
table_setting = True, ROW, 1048576, 8388608, QuickLZ, 1, True
run_workloads = True, 1, RANDOM


[tpch_parquet_partition-insert]
#tpch_parquet_partition: a workload for tpch parquet partition
#NOTE: The differenet tpch_parquet_partition should set the different dbname.
# use tpch_parquet_partition-1, tpch_parquet_partition-2 ,tpch_parquet_partition-3 etc. NOTE: must use '-' to name task
#load_data: flag of data generation: True to generate TPC-DS data, False to skip data generation
#           scale
#           flag of alert partition method: True to use the exchange method, False to use the insert method
dbname = gpsqlinsert
niteration = 1
load_data = True, 1, False
table_setting = True, PARQUET, 1048576, 8388608, Snappy, 1, True
run_workloads = True, 1, RANDOM

[tpch_parquet_partition-exchange]
dbname = gpsqlexchange
niteration = 1
load_data = True, 1, True
table_setting = True, PARQUET, 1048576, 8388608, Snappy, 1, True
run_workloads = True, 1, RANDOM
