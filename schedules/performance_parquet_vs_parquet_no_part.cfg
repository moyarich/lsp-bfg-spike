[lsp]
# task_list: list of workloads to be executed, separated by comma
# exec_mode: sequential/concurrency
task_list = tpch-parquet-10g-uncomp, tpch-parquet-10g-snappy, tpch-parquet-10g-gzip1, tpch-parquet-100g-uncomp, tpch-parquet-100g-snappy, tpch-parquet-100g-gzip1, sri-parquet, copy, gpfdist, dsq
exec_mode = sequential


# 10G per node
[tpch-parquet-10g-uncomp]
# dbname: name of database to run TPC-H
# niteration: number of iterations to run TPC-H
# load_data: flag: True to load TPC-H data, False to skip data loading
#            data_size: GB/host
# table_setting: flag: True for AO, False for Heap
#                orientation: row/column/parquet
#                pagesize: only for parquet, default value is 1048576B (1MB)
#                rowgroupsize: only for parquet, default value is 8388608B (8MB)
#                compression type: zlib/quicklz for AO tables, snappy/gzip for parquet
#                compression level: only 1 for quicklz, 1~9 for zlib
#                partition: True to with 128 partitions, False to without partitions
# run_workloads: flag: True to run TPC-H, False to skip TPC-H query execution
#                nconcurrency: concurrency of TPC-H workloads execution
#                query_order: order of TPC-H queries, SEQUENTIAL/RANDOM
dbname = gpsqltest_tpch_parquet_10g_uncomp
niteration = 1
load_data = True, 10
table_setting = True, PARQUET, 1048576, 8388608, None, 0, False
run_workloads = True, 1, SEQUENTIAL

[tpch-parquet-10g-snappy]
dbname = gpsqltest_tpch_parquet_10g_snappy
niteration = 1
load_data = True, 10
table_setting = True, PARQUET, 1048576, 8388608, SNAPPY, 0, False
run_workloads = True, 1, SEQUENTIAL

[tpch-parquet-10g-gzip1]
dbname = gpsqltest_tpch_parquet_10g_gzip1
niteration = 1
load_data = True, 10
table_setting = True, PARQUET, 1048576, 8388608, GZIP, 1, False
run_workloads = True, 1, SEQUENTIAL



# 100G per node
[tpch-parquet-100g-uncomp]
dbname = gpsqltest_tpch_parquet_100g_uncomp
niteration = 1
load_data = True, 100
table_setting = True, PARQUET, 1048576, 8388608, None, 0, False
run_workloads = True, 1, SEQUENTIAL

[tpch-parquet-100g-snappy]
dbname = gpsqltest_tpch_parquet_100g_snappy
niteration = 1
load_data = True, 100
table_setting = True, PARQUET, 1048576, 8388608, SNAPPY, 0, False
run_workloads = True, 1, SEQUENTIAL

[tpch-parquet-100g-gzip1]
dbname = gpsqltest_tpch_parquet_100g_gzip1
niteration = 1
load_data = True, 100
table_setting = True, PARQUET, 1048576, 8388608, GZIP, 1, False
run_workloads = True, 1, SEQUENTIAL





# ETL workloads
[sri-parquet]
# ntables: number: number of tables to be created
#          method: create table methond,concurrency/sequential
# ninserts: number: number of inserts
#           distribute method: the inserts distribute flag: even/skew
#run_workloads: flag: True to run SRI, False only create tables
#               nconcurrency: concurrency of SRI workloads execution
#               query_order: order of SRI queries, SEQUENTIAL/RANDOM
dbname = gpsqltest
niteration = 10
load_data = True
ntables = 5, concurrency
ninserts = 100, even
table_setting = True, PARQUET, 1048576, 8388608, NONE, 0, False
run_workloads = True, 1, SEQUENTIAL

[copy]
dbname = gpsqltest
niteration = 10
load_data = True
table_setting = True, PARQUET, 1048576, 8388608, NONE, 0, False
run_workloads = True, 1, SEQUENTIAL

[gpfdist]
dbname = gpsqltest
niteration = 3
load_data = True, 32
table_setting = True, PARQUET, 1048576, 8388608, NONE, 0, False
run_workloads = True, 1, SEQUENTIAL



# DSQ
[dsq]
dbname = gpsqltest
niteration = 2
load_data = True
size = 3
run_workloads = True, 1, SEQUENTIAL
